[{"C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\index.js":"1","C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\App.js":"2","C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\reportWebVitals.js":"3","C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\components\\BuscadorAlumno\\BuscadorAlumno.js":"4","C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\components\\GruposAlumno\\GruposAlumno.js":"5","C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\components\\GruposMaterias\\GruposMaterias.js":"6","C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\utils\\googlesheet.js":"7","C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\views\\AlumnChanging\\AlumnChanging.js":"8","C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\views\\Home\\Home.js":"9"},{"size":535,"mtime":1686187271003,"results":"10","hashOfConfig":"11"},{"size":940,"mtime":1691457620685,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1686187271042,"results":"13","hashOfConfig":"11"},{"size":1180,"mtime":1647276500644,"results":"14","hashOfConfig":"11"},{"size":974,"mtime":1647276500644,"results":"15","hashOfConfig":"11"},{"size":2053,"mtime":1647276500645,"results":"16","hashOfConfig":"11"},{"size":17513,"mtime":1689204359493,"results":"17","hashOfConfig":"11"},{"size":1093,"mtime":1691452288300,"results":"18","hashOfConfig":"11"},{"size":271,"mtime":1691457583882,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1jw9w17",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"23"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"23"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"23"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"23"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},"C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\index.js",[],[],[],"C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\App.js",["55"],[],"import logo from './logo.svg';\nimport './App.css';\nimport AlumnChanging from \"./views/AlumnChanging/AlumnChanging\"\nimport Home from \"./views/Home/Home\"\n//import { getSheetName } from \"./utils/googlesheet\";\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\n\n\nfunction App() {\n  //getSheetName()\n  return (\n    <Router>\n      <div className=\"App\">\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/componenteA\">AlumnChanging</Link>\n            </li>\n            <li>\n              <Link to=\"/componenteB\">Home</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Switch>\n          <Route path=\"/src/views/AlumnChanging/AlumnChanging.js\">\n            <AlumnChanging />\n          </Route>\n          <Route path=\"/src/views/Home/Home.js\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\reportWebVitals.js",[],[],"C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\components\\BuscadorAlumno\\BuscadorAlumno.js",["56"],[],"import React, {useState, useEffect} from 'react'\r\n\r\n\r\n\r\nconst BuscadorAlumno = ({setUserid}) => {\r\n    const [mail, setMail] = useState(\"gonzalocabad@live.com\")\r\n    \r\n\r\n    \r\n\r\n    const handleInputChange = (event) => {\r\n      setMail(\r\n        event.target.value\r\n      )\r\n\r\n    }\r\n    \r\n    const enviarDatos = async (event) => {\r\n\r\n      event.preventDefault()\r\n       \r\n    const res = await fetch(\r\n      `http://www.ort.edu.ar:50080/moodle/webservice/rest/server.php?wstoken=c74aa13d9dc951886bd3c5a7d80d1c7e&moodlewsrestformat=json&wsfunction=core_user_get_users_by_field&field=email&values[0]=${mail}`\r\n    )\r\n\r\n    const data = await res.json()  \r\n    data.length > 0 && setUserid(data[0].id)\r\n      \r\n\r\n      \r\n      \r\n      \r\n      \r\n  }\r\n\r\n    return (\r\n        <div>\r\n            <form className=\"row\" onSubmit={enviarDatos}>\r\n              <label>\r\n                <input type=\"text\" placeholder=\"Mail\" className=\"form-control\" onChange={handleInputChange} name=\"mail\"></input>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Enviar</button>\r\n              </label>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BuscadorAlumno\r\n","C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\components\\GruposAlumno\\GruposAlumno.js",["57"],[],"import React, {useState, useEffect} from 'react'\r\n\r\n\r\n\r\nconst GruposAlumno = ({userid, setCourseid}) => {\r\n    \r\n    const [dataMaterias, setDataMaterias] = useState()\r\n    \r\n    \r\n    useEffect (()=>{    \r\n        enviarDatos()\r\n    }, [userid])\r\n\r\n    \r\n    const enviarDatos = async () => {\r\n    const res = await fetch(\r\n      `http://www.ort.edu.ar:50080/moodle/webservice/rest/server.php?wsfunction=core_group_get_course_user_groups&moodlewsrestformat=json&wstoken=c74aa13d9dc951886bd3c5a7d80d1c7e&userid=${userid}`\r\n    )\r\n\r\n    const data = await res.json()\r\n      \r\n    setDataMaterias(data)\r\n\r\n      \r\n  }\r\n    \r\n    return (\r\n        <div>\r\n            <ul className=\"row\">\r\n              materias:\r\n              {dataMaterias?.groups.map((grupo, index) => {\r\n                  return <p key={index} onClick={ () => setCourseid(grupo)}>{grupo.name} {grupo.id}</p>\r\n                  })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GruposAlumno","C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\components\\GruposMaterias\\GruposMaterias.js",["58","59"],[],"import React, {useState, useEffect} from 'react'\r\n\r\nconst GruposMaterias = ({courseid, gruposMaterias, setGruposMaterias, grupoElegido, setGrupoElegido, userid}) => {\r\n\r\n    \r\n    useEffect (()=>{    \r\n        enviarDatos()\r\n\r\n    }, [courseid])\r\n\r\n    const enviarDatos = async () => {\r\n    const res = await fetch(\r\n      `http://www.ort.edu.ar:50080/moodle/webservice/rest/server.php?wstoken=c74aa13d9dc951886bd3c5a7d80d1c7e&moodlewsrestformat=json&wsfunction=core_group_get_course_groups&courseid=${courseid.courseid}`\r\n    )\r\n\r\n    const dataGruposMaterias = await res.json()   \r\n    setGruposMaterias(dataGruposMaterias)    \r\n    }\r\n\r\n    const cambiarGrupo = async (userid,courseid, grupoElegido) => {\r\n        console.log(\"userid\", userid, \"courseid\", courseid.id, \"grupoElegido\", grupoElegido.id)\r\n        await fetch(\r\n            `http://www.ort.edu.ar:50080/moodle/webservice/rest/server.php?wstoken=c74aa13d9dc951886bd3c5a7d80d1c7e&moodlewsrestformat=json&wsfunction=core_group_delete_group_members&members[0][groupid]=${courseid.id}&members[0][userid]=${userid}`\r\n          )\r\n        \r\n        .then(await fetch(\r\n            `http://www.ort.edu.ar:50080/moodle/webservice/rest/server.php?wstoken=c74aa13d9dc951886bd3c5a7d80d1c7e&moodlewsrestformat=json&wsfunction=core_group_add_group_members&members[0][groupid]=${grupoElegido.id}&members[0][userid]=${userid}`\r\n          ))\r\n        .then(() => alert(\"Cambio Hecho\"))\r\n    }\r\n\r\n  return (\r\n    <div>\r\n        <div className= \"listas\">\r\n            <p>Materia Elegida:{grupoElegido ? grupoElegido.name : \"No elegiste Grupo destino\"} </p>\r\n            <button onClick={ () => cambiarGrupo(userid, courseid, grupoElegido) }>Cambiar</button>\r\n        </div>\r\n        Grupo a cambiar: \r\n        <ul className=\"row\">\r\n              {gruposMaterias?.map((grupo, index) => {\r\n                \r\n                  return <p key={index} onClick={ () => setGrupoElegido(grupo)} >{grupo.name} {grupo.id}</p>\r\n                  })}\r\n        </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GruposMaterias","C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\utils\\googlesheet.js",["60"],[],"const { google } = require('googleapis');\r\nconst { GoogleAuth } = require('google-auth-library');\r\nconst credentials = require('../claves/del-ort-fb079ad7ab29.json')\r\n\r\n\r\n\r\nasync function listAllSpreadsheets() {\r\n  try {\r\n    const auth = new google.auth.GoogleAuth({\r\n      credentials,\r\n      scopes: ['https://www.googleapis.com/auth/drive', 'https://www.googleapis.com/auth/spreadsheets'],\r\n    });\r\n\r\n    const sheets = google.sheets({ version: 'v4', auth });\r\n    const drive = google.drive({ version: 'v3', auth });\r\n\r\n    // Obtiene la lista de hojas de cálculo propiedad de la cuenta de servicio\r\n    const response = await drive.files.list({\r\n      q: \"mimeType='application/vnd.google-apps.spreadsheet' and 'me' in owners\",\r\n    });\r\n\r\n    // Imprime el nombre de cada hoja de cálculo\r\n    console.log('Hojas de cálculo de la cuenta de servicio:');\r\n    for (const file of response.data.files) {\r\n      console.log(file.name);\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error al obtener la lista de hojas de cálculo:', error.message);\r\n  }\r\n}\r\n\r\n\r\nasync function concatenateAndSetValues() {\r\n  \r\n\r\n  const auth = new google.auth.GoogleAuth({\r\n    credentials,\r\n    scopes: ['https://www.googleapis.com/auth/spreadsheets'],\r\n  });\r\n\r\n  const sheets = google.sheets({ version: 'v4', auth });\r\n\r\n  const spreadsheetId = '1b9DlSgjkv91tMZ4PL6zWDryfeEFLAzU9PsFytkpXtj4';\r\n  const sheetName = 'ALMAGRO 2023-2'; // Reemplaza con el nombre de la hoja de cálculo que deseas acceder\r\n  const startRow = 3; // Fila desde la cual comenzar a colocar los resultados\r\n  const targetColumn = 'T'; // Columna en la que colocar los resultados\r\n\r\n  try {\r\n    // Obtiene los valores de las celdas L, M, N y O\r\n    const response = await sheets.spreadsheets.values.get({\r\n      spreadsheetId: spreadsheetId,\r\n      range: `${sheetName}!L${startRow}:O`,\r\n    });\r\n\r\n    const values = response.data.values;\r\n\r\n    if (!values || values.length === 0) {\r\n      console.log('No hay valores en las celdas especificadas. Deteniendo el proceso.');\r\n      return;\r\n    }\r\n\r\n    // Calcula el rango de destino hasta la última fila con valores\r\n    const endRow = startRow + values.length - 1;\r\n\r\n    // Crear una lista de letras en la columna T por cada fila\r\n    const results = values.map((row) => {\r\n      let allNoOrEmpty = true;\r\n      const lettersList = [];\r\n\r\n      // Recorrer las columnas L, M, N y O\r\n      for (let i = 0; i < 4; i++) {\r\n        const value = row[i];\r\n\r\n        if (value && (value.toLowerCase() === 'si' || value.toLowerCase() === 'sí')) {\r\n          allNoOrEmpty = false;\r\n          if (i === 0) {\r\n            lettersList.push('A');\r\n          } else if (i === 1) {\r\n            lettersList.push('B');\r\n          } else if (i === 2) {\r\n            lettersList.push('C');\r\n          } else if (i === 3) {\r\n            lettersList.push('D');\r\n          }\r\n        }\r\n      }\r\n\r\n      if (allNoOrEmpty) {\r\n        lettersList.push('E');\r\n      }\r\n\r\n      return lettersList.join('');\r\n    });\r\n\r\n    // Actualiza los valores en la columna T\r\n    await sheets.spreadsheets.values.update({\r\n      spreadsheetId: spreadsheetId,\r\n      range: `${sheetName}!${targetColumn}${startRow}:${targetColumn}${endRow}`,\r\n      valueInputOption: 'USER_ENTERED',\r\n      resource: { values: results.map((result) => [result]) },\r\n    });\r\n\r\n    console.log('Las letras se han colocado en la columna T según los valores en las columnas L, M, N y O.');\r\n  } catch (error) {\r\n    console.error('Error al colocar las letras:', error);\r\n  }\r\n}\r\n\r\n\r\nasync function generateAndShareSheets() {\r\n\r\n  const auth = new google.auth.GoogleAuth({\r\n    credentials,\r\n    scopes: ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive'],\r\n  });\r\n\r\n  const sheets = google.sheets({ version: 'v4', auth });\r\n  const drive = google.drive({ version: 'v3', auth });\r\n\r\n  const sourceSpreadsheetId = '1b9DlSgjkv91tMZ4PL6zWDryfeEFLAzU9PsFytkpXtj4';\r\n  const sourceSheetName = 'ALMAGRO 2023-2'; // Reemplaza con el nombre de la hoja de cálculo que deseas copiar\r\n  const sourceRange = `${sourceSheetName}!A3:U`; // Rango que incluye las columnas A a U, comenzando desde la fila 3\r\n\r\n  try {\r\n    // Obtener los datos de la hoja de origen\r\n    const response = await sheets.spreadsheets.values.get({\r\n      spreadsheetId: sourceSpreadsheetId,\r\n      range: sourceRange,\r\n    });\r\n\r\n    const values = response.data.values;\r\n\r\n    if (!values || values.length === 0) {\r\n      console.log('No hay valores en la hoja de origen. Deteniendo el proceso.');\r\n      return;\r\n    }\r\n\r\n    // Crear un objeto para almacenar los datos filtrados por la columna U\r\n    const filteredData = {};\r\n\r\n    // Filtrar los datos por la columna U y almacenarlos en el objeto\r\n    values.forEach((row) => {\r\n      const columnUValue = row[20]; // Índice 20 corresponde a la columna U (0-indexed)\r\n      const lastChar = columnUValue ? columnUValue.slice(-1) : ''; // Obtener el último carácter de la columna U\r\n\r\n      if (lastChar === 'A') {\r\n        if (!filteredData[lastChar]) {\r\n          filteredData[lastChar] = [];\r\n        }\r\n        let x = \"A\"\r\n\r\n        const rowData = [\r\n          row[1], // DNI\r\n          'dnidnidni', // Password\r\n          row[4], // Nombre\r\n          row[3], // Apellido\r\n          row[5], // Mail\r\n          '', // Idnumber\r\n          row[6], // Teléfono\r\n          \"CABA\",\r\n          \"Almagro\",\r\n          \"ASC\", //carrera\r\n          row[19], // Class\r\n          \"Almagro\",\r\n          \"ASC\", //carrera\r\n          row[19], // Class\r\n          \"FPR-2023-2\",\r\n          \"1\",\r\n          \"student\",\r\n          `YA-FPR${x}`,\r\n          \"THP-2023-2\",\r\n          \"1\",\r\n          \"student\",\r\n          `YA-THP${x}`,\r\n          \"OEM-2023-2\",\r\n          \"1\",\r\n          \"student\",\r\n          `YA-OEM${x}`,\r\n           \"IIF1-2023-2\",\r\n          \"1\",\r\n          \"student\",\r\n          `YA-IIF${x}`,\r\n          \"TCI-2023-2\",\r\n          \"1\",\r\n          \"student\",\r\n          `YA-TCI${x}`,\r\n          \"MAT-2023-2\",\r\n          \"1\",\r\n          \"student\",\r\n          `YA-MAT${x}`,\r\n          \"INT-2023-2\",\r\n          \"1\",\r\n          \"student\",\r\n          `YA-INT${x}`\r\n        ];\r\n\r\n        filteredData[lastChar].push(rowData); // Agregar la fila filtrada al grupo correspondiente\r\n      }\r\n    });\r\n\r\n    // Verificar si hay datos filtrados para la letra A\r\n    if (!filteredData['A'] || filteredData['A'].length === 0) {\r\n      console.log('No hay datos filtrados para la letra A. Deteniendo el proceso.');\r\n      return;\r\n    }\r\n\r\n    // Cabeceras adicionales\r\n    const additionalHeaders = [\r\n      'username', 'password', 'firstname', 'lastname', 'email', 'idnumber', \"phone1\", \"city\", \"institution\", \"department\", \"Class\", \"profile_field_1Sede\",\"profile_field_2Carrera\",\"profile_field_3class\",\"course1\",\"type1\",\"role1\",\"group1\",\"course2\",\"type2\",\"role2\",\"group2\",\"course3\",\"type3\",\"role3\",\"group3\",\"course4\",\"type4\",\"role4\",\"group4\",\"course5\",\"type5\",\"role5\",\"group5\",\"course6\",\"type6\",\"role6\",\"group6\",\"course7\",\"type7\",\"role7\", \"group7\" \r\n    ];\r\n\r\n    const sheetName = 'Hoja A'; // Nombre de la nueva hoja de cálculo\r\n\r\n    // Crear la hoja de cálculo\r\n    const newSpreadsheet = await sheets.spreadsheets.create({\r\n      resource: {\r\n        properties: {\r\n          title: sheetName,\r\n        },\r\n      },\r\n    });\r\n\r\n    const newSpreadsheetId = newSpreadsheet.data.spreadsheetId;\r\n\r\n    // Agregar las cabeceras a la nueva hoja de cálculo\r\n    await sheets.spreadsheets.values.update({\r\n      spreadsheetId: newSpreadsheetId,\r\n      range: 'Sheet1!A1',\r\n      valueInputOption: 'USER_ENTERED',\r\n      resource: { values: [additionalHeaders] },\r\n    });\r\n\r\n    // Copiar los datos filtrados a la nueva hoja de cálculo\r\n    await sheets.spreadsheets.values.update({\r\n      spreadsheetId: newSpreadsheetId,\r\n      range: 'Sheet1!A2',\r\n      valueInputOption: 'USER_ENTERED',\r\n      resource: { values: filteredData['A'] },\r\n    });\r\n\r\n    // Compartir la hoja de cálculo con tu cuenta de Gmail\r\n    await drive.permissions.create({\r\n      fileId: newSpreadsheetId,\r\n      sendNotificationEmails: false,\r\n      requestBody: {\r\n        role: 'writer',\r\n        type: 'user',\r\n        emailAddress: 'lucas.baruffaldi@ort.edu.ar',\r\n      },\r\n    });\r\n\r\n    console.log(`Se ha creado la hoja de cálculo \"${sheetName}\" con los datos filtrados por \"A\" y se ha compartido con tu cuenta de Gmail.`);\r\n  } catch (error) {\r\n    console.error('Error al generar y compartir las nuevas hojas de cálculo:', error);\r\n  }\r\n}\r\nasync function generateAndShareSheets2() {\r\n\r\n  const auth = new google.auth.GoogleAuth({\r\n    credentials,\r\n    scopes: ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive'],\r\n  });\r\n\r\n  const sheets = google.sheets({ version: 'v4', auth });\r\n  const drive = google.drive({ version: 'v3', auth });\r\n\r\n  const sourceSpreadsheetId = '1b9DlSgjkv91tMZ4PL6zWDryfeEFLAzU9PsFytkpXtj4';\r\n  const sourceSheetName = 'ALMAGRO 2023-2'; // Reemplaza con el nombre de la hoja de cálculo que deseas copiar\r\n  const sourceRange = `${sourceSheetName}!A3:U`; // Rango que incluye las columnas A a U, comenzando desde la fila 3\r\n\r\n  try {\r\n    // Obtener los datos de la hoja de origen\r\n    const response = await sheets.spreadsheets.values.get({\r\n      spreadsheetId: sourceSpreadsheetId,\r\n      range: sourceRange,\r\n    });\r\n\r\n    const values = response.data.values;\r\n\r\n    if (!values || values.length === 0) {\r\n      console.log('No hay valores en la hoja de origen. Deteniendo el proceso.');\r\n      return;\r\n    }\r\n\r\n    // Crear un objeto para almacenar los datos filtrados por la columna U\r\n    const filteredData = {};\r\n\r\n    // Filtrar los datos por la columna U y almacenarlos en el objeto\r\n    values.forEach((row) => {\r\n      const columnUValue = row[20]; // Índice 20 corresponde a la columna U (0-indexed)\r\n      const lastChar = columnUValue ? columnUValue.slice(-1) : ''; // Obtener el último carácter de la columna U\r\n\r\n      if (lastChar !== '') {\r\n        if (!filteredData[lastChar]) {\r\n          filteredData[lastChar] = [];\r\n        }\r\n        let x = lastChar;\r\n\r\n        const rowData = [\r\n          row[1], // DNI\r\n          'Ort12345', // Password\r\n          row[4], // Nombre\r\n          row[3], // Apellido\r\n          row[5], // Mail\r\n          '', // Idnumber\r\n          row[6], // Teléfono\r\n          \"CABA\",\r\n          \"Almagro\",\r\n          \"ASC\", //carrera\r\n          row[19], // Class\r\n          \"Almagro\",\r\n          \"ASC\", //carrera\r\n          row[19], // Class\r\n          \"FPR-2023-2\",\r\n          \"1\",\r\n          \"student\",\r\n          `YA-FPR${x}`,\r\n          \"THP-2023-2\",\r\n          \"1\",\r\n          \"student\",\r\n          `YA-THP${x}`,\r\n          \"OEM-2023-2\",\r\n          \"1\",\r\n          \"student\",\r\n          `YA-OEM${x}`,\r\n          \"IIF1-2023-2\",\r\n          \"1\",\r\n          \"student\",\r\n          `YA-IIF${x}`,\r\n          \"TCI-2023-2\",\r\n          \"1\",\r\n          \"student\",\r\n          `YA-TCI${x}`,\r\n          \"MAT-2023-2\",\r\n          \"1\",\r\n          \"student\",\r\n          `YA-MAT${x}`,\r\n          \"INT-2023-2\",\r\n          \"1\",\r\n          \"student\",\r\n          `YA-INT${x}`\r\n        ];\r\n\r\n        filteredData[lastChar].push(rowData); // Agregar la fila filtrada al grupo correspondiente\r\n      }\r\n    });\r\n\r\n    // Verificar si hay datos filtrados\r\n    const filteredKeys = Object.keys(filteredData);\r\n    if (filteredKeys.length === 0) {\r\n      console.log('No hay datos filtrados. Deteniendo el proceso.');\r\n      return;\r\n    }\r\n\r\n    // Cabeceras adicionales\r\n    const additionalHeaders = [\r\n      'username', 'password', 'firstname', 'lastname', 'email', 'idnumber', \"phone1\", \"city\", \"institution\", \"department\", \"Class\", \"profile_field_1Sede\",\"profile_field_2Carrera\",\"profile_field_3class\",\"course1\",\"type1\",\"role1\",\"group1\",\"course2\",\"type2\",\"role2\",\"group2\",\"course3\",\"type3\",\"role3\",\"group3\",\"course4\",\"type4\",\"role4\",\"group4\",\"course5\",\"type5\",\"role5\",\"group5\",\"course6\",\"type6\",\"role6\",\"group6\",\"course7\",\"type7\",\"role7\", \"group7\" \r\n    ];\r\n\r\n    // Iterar sobre las últimas letras filtradas\r\n    for (const lastChar of filteredKeys) {\r\n      const sheetName = `Almagro - ${lastChar}`;\r\n\r\n      // Crear la nueva hoja dentro de la planilla existente\r\n      const addSheetRequest = {\r\n        spreadsheetId: sourceSpreadsheetId,\r\n        resource: {\r\n          requests: [\r\n            {\r\n              addSheet: {\r\n                properties: {\r\n                  title: sheetName,\r\n                },\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      };\r\n      await sheets.spreadsheets.batchUpdate(addSheetRequest);\r\n\r\n      // Obtener el ID de la hoja de cálculo donde se generarán los datos filtrados\r\n      const newSpreadsheetId = sourceSpreadsheetId;\r\n\r\n      // Agregar las cabeceras a la nueva hoja de cálculo\r\n      const headersUpdateRequest = {\r\n        spreadsheetId: newSpreadsheetId,\r\n        range: `${sheetName}!A1`,\r\n        valueInputOption: 'USER_ENTERED',\r\n        resource: { values: [additionalHeaders] },\r\n      };\r\n      await sheets.spreadsheets.values.update(headersUpdateRequest);\r\n\r\n      // Copiar los datos filtrados a la nueva hoja de cálculo\r\n      const dataUpdateRequest = {\r\n        spreadsheetId: newSpreadsheetId,\r\n        range: `${sheetName}!A2`,\r\n        valueInputOption: 'USER_ENTERED',\r\n        resource: { values: filteredData[lastChar] },\r\n      };\r\n      await sheets.spreadsheets.values.update(dataUpdateRequest);\r\n\r\n      // Compartir la hoja de cálculo con tu cuenta de Gmail\r\n      await drive.permissions.create({\r\n        fileId: newSpreadsheetId,\r\n        sendNotificationEmails: false,\r\n        requestBody: {\r\n          role: 'writer',\r\n          type: 'user',\r\n          emailAddress: 'lucas.baruffaldi@ort.edu.ar', // Reemplaza con tu dirección de correo electrónico de Gmail\r\n        },\r\n      });\r\n\r\n      console.log(`Se ha creado la hoja de cálculo \"${sheetName}\" con los datos filtrados por \"${lastChar}\" y se ha compartido con tu cuenta de Gmail.`);\r\n    }\r\n\r\n    console.log(`Se han generado y compartido las nuevas hojas de cálculo dentro del documento.`);\r\n  } catch (error) {\r\n    console.error('Error al generar y compartir las nuevas hojas de cálculo:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nasync function shareAllSpreadsheets() {\r\n\r\n\r\n  const auth = new google.auth.GoogleAuth({\r\n    credentials,\r\n    scopes: ['https://www.googleapis.com/auth/drive'],\r\n  });\r\n\r\n  const drive = google.drive({ version: 'v3', auth });\r\n\r\n  try {\r\n    // Obtener la lista de archivos creados por la cuenta de servicio\r\n    const response = await drive.files.list({\r\n      q: \"mimeType='application/vnd.google-apps.spreadsheet'\",\r\n      fields: 'files(id, name)',\r\n    });\r\n\r\n    const files = response.data.files;\r\n\r\n    if (files && files.length > 0) {\r\n      for (const file of files) {\r\n        const fileId = file.id;\r\n\r\n        // Compartir el archivo con tu dirección de correo electrónico\r\n        await drive.permissions.create({\r\n          fileId: fileId,\r\n          requestBody: {\r\n            role: 'writer',\r\n            type: 'user',\r\n            emailAddress: 'lucas.baruffaldi@ort.edu.ar', // Reemplaza con tu dirección de correo electrónico\r\n          },\r\n        });\r\n\r\n        console.log(`Se ha compartido la planilla \"${file.name}\" con tu cuenta de Gmail.`);\r\n      }\r\n    } else {\r\n      console.log('No se encontraron planillas creadas por la cuenta de servicio.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al compartir las planillas:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\nasync function listAllSpreadsheets() {\r\n\r\n  \r\n  const auth = new google.auth.GoogleAuth({\r\n    credentials,\r\n    scopes: ['https://www.googleapis.com/auth/drive'],\r\n  });\r\n  \r\n  const drive = google.drive({ version: 'v3', auth });\r\n  \r\n  try {\r\n    const response = await drive.files.list({\r\n      q: \"mimeType='application/vnd.google-apps.spreadsheet'\",\r\n      fields: 'files(id, name)',\r\n    });\r\n\r\n    const files = response.data.files;\r\n    \r\n    if (files && files.length > 0) {\r\n      console.log('Planillas de la cuenta de servicio:');\r\n      for (const file of files) {\r\n        console.log(`${file.name} (${file.id})`);\r\n      }\r\n    } else {\r\n      console.log('No se encontraron planillas en la cuenta de servicio.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al obtener las planillas:', error);\r\n  }\r\n}\r\n\r\nasync function deleteAllSpreadsheets() {\r\n  try {\r\n    const auth = new google.auth.GoogleAuth({\r\n      credentials,\r\n      scopes: ['https://www.googleapis.com/auth/drive'],\r\n    });\r\n    \r\n    const drive = google.drive({ version: 'v3', auth });\r\n\r\n    // Obtener la lista de hojas de cálculo creadas por la cuenta de servicio\r\n    const response = await drive.files.list({\r\n      q: \"mimeType='application/vnd.google-apps.spreadsheet' and 'me' in owners\",\r\n    });\r\n\r\n    const files = response.data.files;\r\n    \r\n    // Borrar cada hoja de cálculo\r\n    for (const file of files) {\r\n      await drive.files.delete({ fileId: file.id });\r\n      console.log(`Hoja de cálculo \"${file.name}\" borrada con éxito.`);\r\n    }\r\n    \r\n    console.log('Todas las hojas de cálculo hechas por la cuenta de servicio han sido borradas.');\r\n\r\n  } catch (error) {\r\n    console.error('Error al borrar las hojas de cálculo:', error.message);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//listAllSpreadsheets();\r\n\r\n//concatenateAndSetValues();\r\n//shareAllSpreadsheets();\r\n\r\ngenerateAndShareSheets2();\r\n//deleteAllSpreadsheets();\r\n\r\n\r\n","C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\views\\AlumnChanging\\AlumnChanging.js",["61"],[],"import React, {useState, useEffect} from 'react'\r\n\r\n// componentes\r\nimport BuscadorAlumno from \"../../components/BuscadorAlumno/BuscadorAlumno\"\r\nimport GruposAlumno from \"../../components/GruposAlumno/GruposAlumno\"\r\nimport GruposMaterias from \"../../components/GruposMaterias/GruposMaterias\"\r\n\r\n\r\n\r\nconst AlumnChanging = () => {\r\n    const [userid, setUserid] = useState()\r\n    const [courseid, setCourseid] = useState()\r\n    const [gruposMaterias, setGruposMaterias] = useState()\r\n    const [grupoElegido, setGrupoElegido] = useState()\r\n    return (\r\n        <div>\r\n            <BuscadorAlumno setUserid={setUserid} ></BuscadorAlumno>\r\n            <div className='listas'>\r\n            {userid && <GruposAlumno userid={userid} setCourseid={setCourseid} ></GruposAlumno>}\r\n            {courseid && <GruposMaterias courseid={courseid} gruposMaterias={gruposMaterias} setGruposMaterias={setGruposMaterias} grupoElegido={grupoElegido} setGrupoElegido={setGrupoElegido} userid={userid} ></GruposMaterias>}\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n    \r\n}\r\n\r\nexport default AlumnChanging\r\n","C:\\Users\\MusicLaB\\Desktop\\del-ort\\src\\views\\Home\\Home.js",["62"],[],"import React from 'react';\r\nimport AlumnChanging from '../AlumnChanging/AlumnChanging'\r\nconst Home = () => {\r\n  return (\r\n\r\n    <div>\r\n        <h1>Mi Componente</h1>\r\n        <p>Este es un componente de ejemplo en React.</p>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Home;",{"ruleId":"63","severity":1,"message":"64","line":1,"column":8,"nodeType":"65","messageId":"66","endLine":1,"endColumn":12},{"ruleId":"63","severity":1,"message":"67","line":1,"column":26,"nodeType":"65","messageId":"66","endLine":1,"endColumn":35},{"ruleId":"68","severity":1,"message":"69","line":12,"column":8,"nodeType":"70","endLine":12,"endColumn":16,"suggestions":"71"},{"ruleId":"63","severity":1,"message":"72","line":1,"column":16,"nodeType":"65","messageId":"66","endLine":1,"endColumn":24},{"ruleId":"68","severity":1,"message":"69","line":9,"column":8,"nodeType":"70","endLine":9,"endColumn":18,"suggestions":"73"},{"ruleId":null,"fatal":true,"severity":2,"message":"74","line":471,"column":15,"nodeType":null},{"ruleId":"63","severity":1,"message":"67","line":1,"column":26,"nodeType":"65","messageId":"66","endLine":1,"endColumn":35},{"ruleId":"63","severity":1,"message":"75","line":2,"column":8,"nodeType":"65","messageId":"66","endLine":2,"endColumn":21},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'enviarDatos'. Either include it or remove the dependency array.","ArrayExpression",["76"],"'useState' is defined but never used.",["77"],"Parsing error: Identifier 'listAllSpreadsheets' has already been declared. (471:15)","'AlumnChanging' is defined but never used.",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [enviarDatos, userid]",{"range":"82","text":"83"},"Update the dependencies array to be: [courseid, enviarDatos]",{"range":"84","text":"85"},[237,245],"[enviarDatos, userid]",[234,244],"[courseid, enviarDatos]"]